// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const getRecords = `-- name: GetRecords :many
SELECT 
    records.id, records.a_list
FROM
    records
`

func (q *Queries) GetRecords(ctx context.Context) ([]Record, error) {
	rows, err := q.db.QueryContext(ctx, getRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(&i.ID, pq.Array(&i.AList)); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecordsWithEmbed = `-- name: GetRecordsWithEmbed :many
SELECT 
    records.id, records.a_list
FROM
    records
`

type GetRecordsWithEmbedRow struct {
	Record Record
}

func (q *Queries) GetRecordsWithEmbed(ctx context.Context) ([]GetRecordsWithEmbedRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecordsWithEmbed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecordsWithEmbedRow
	for rows.Next() {
		var i GetRecordsWithEmbedRow
		if err := rows.Scan(&i.Record.ID, &i.Record.AList); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
